import logging
import asyncio
import sqlite3
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

# Настройка логирования
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# Функции для работы с базой данных
def init_db():
    connection = sqlite3.connect('to_do.db')
    cursor = connection.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS to_do_list (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            item TEXT,
            purchased BOOLEAN
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS history (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            date TEXT,
            item TEXT,
            status TEXT
        )
    ''')
    connection.commit()
    connection.close()

def add_item(item):
    connection = sqlite3.connect('to_do.db')
    cursor = connection.cursor()
    cursor.execute('INSERT INTO to_do_list (item, purchased) VALUES (?, ?)', (item, False))
    connection.commit()
    connection.close()

def get_to_do_list():
    connection = sqlite3.connect('to_do.db')
    cursor = connection.cursor()
    cursor.execute('SELECT * FROM to_do_list')
    items = cursor.fetchall()
    connection.close()
    return items

def mark_item_as_purchased(item):
    connection = sqlite3.connect('to_do.db')
    cursor = connection.cursor()
    cursor.execute('UPDATE to_do_list SET purchased = ? WHERE item = ?', (True, item))
    cursor.execute('INSERT INTO history (date, item, status) VALUES (?, ?, ?)',
                   (datetime.now().date().isoformat(), item, 'completed'))
    connection.commit()
    connection.close()

def mark_item_as_unpurchased(item):
    connection = sqlite3.connect('to_do.db')
    cursor = connection.cursor()
    cursor.execute('UPDATE to_do_list SET purchased = ? WHERE item = ?', (False, item))
    cursor.execute('INSERT INTO history (date, item, status) VALUES (?, ?, ?)',
                   (datetime.now().date().isoformat(), item, 'pending'))
    connection.commit()
    connection.close()

def reset_purchased_items():
    connection = sqlite3.connect('to_do.db')
    cursor = connection.cursor()
    cursor.execute('UPDATE to_do_list SET purchased = ?', (False,))
    connection.commit()
    connection.close()

def get_history():
    connection = sqlite3.connect('to_do.db')
    cursor = connection.cursor()
    cursor.execute('''
        SELECT date, COUNT(*) AS completed_tasks
        FROM history
        WHERE status = 'completed'
        GROUP BY date
        ORDER BY date DESC
    ''')
    rows = cursor.fetchall()
    connection.close()
    return rows

# Обработчики команд и меню
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Добро пожаловать! Я бот для отслеживания дел.")

async def add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if context.args:
            item = ' '.join(context.args)
            add_item(item)
            await update.message.reply_text(f'Дело "{item}" добавлено в список.')
        else:
            await update.message.reply_text('Пожалуйста, укажите дело:')
            context.user_data['add_item'] = True
    except Exception as e:
        logger.error(f"Error adding items: {e}")
        await update.message.reply_text('Произошла ошибка при добавлении дела.')

async def list_items(update: Update, context: ContextTypes.DEFAULT_TYPE):
    items = get_to_do_list()
    if items:
        keyboard = []
        for i, (item_id, item, purchased) in enumerate(items):
            button_text = "✅" if purchased else "❌"
            button_data = f"toggle_{item_id}"
            button = InlineKeyboardButton(text=f"{button_text} {item}", callback_data=button_data)
            keyboard.append([button])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text('Список дел:', reply_markup=reply_markup)
    else:
        await update.message.reply_text('Список дел пуст.')

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reset_purchased_items()
    await update.message.reply_text("Отметки сброшены")

async def history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rows = get_history()
    if not rows:
        await update.message.reply_text('История пуста.')
        return

    response = "История выполненных дел по дням:\n"
    for row in rows:
        response += f"{row[0]}: {row[1]} дел выполнено\n"

    await update.message.reply_text(response)

def get_history_stats():
    connection = sqlite3.connect('to_do.db')
    cursor = connection.cursor()
    cursor.execute('''
        SELECT
            date,
            SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) AS completed_tasks,
            COUNT(*) AS total_tasks
        FROM history
        GROUP BY date
        ORDER BY date DESC
    ''')
    rows = cursor.fetchall()
    connection.close()
    return rows

# Обработчики команд и меню
# ...

async def history_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rows = get_history_stats()
    if not rows:
        await update.message.reply_text('История пуста.')
        return

    response = "Статистика выполненных дел:\n"
    for row in rows:
        response += f"{row[0]} выполнено: {row[1]} из {row[2]} \n"

    await update.message.reply_text(response)
    
# Обработчики кнопок и сообщений
async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    if data.startswith('toggle_'):
        item_id = int(data.split('_')[1])
        items = get_to_do_list()
        item = next((item for item in items if item[0] == item_id), None)
        if item:
            if item[2]:
                mark_item_as_unpurchased(item[1])
            else:
                mark_item_as_purchased(item[1])
            await query.edit_message_text(text="Список дел:", reply_markup=await generate_keyboard())
    elif data == 'list':
        await list_items(update, context)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'add_item' in context.user_data and context.user_data['add_item']:
        item = update.message.text
        add_item(item)
        context.user_data['add_item'] = False
        await update.message.reply_text(f'Дело "{item}" добавлено в список.')
    else:
        await update.message.reply_text('Неизвестная команда.')

async def generate_keyboard():
    keyboard = []
    items = get_to_do_list()
    for i, (item_id, item, purchased) in enumerate(items):
        button_text = "✅" if purchased else "❌"
        button_data = f"toggle_{item_id}"
        button = InlineKeyboardButton(text=f"{button_text} {item}", callback_data=button_data)
        keyboard.append([button])
    return InlineKeyboardMarkup(keyboard)
async def setup_commands(application: Application):
    commands = [
        ("start", "Начать работу с ботом"),
        ("add", "Добавить дело"),
        ("list", "Показать список дел"),
        ("reset", "Сбросить отметки"),
        ("history_stats","Статистика дел")
    ]
    await application.bot.set_my_commands(commands)
# Запуск бота
async def run_bot(token):
    application = Application.builder().token(token).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("add", add))
    application.add_handler(CommandHandler("list", list_items))  
    application.add_handler(CommandHandler("reset", reset))
    application.add_handler(CommandHandler("history_stats", history_stats))

    application.add_handler(CallbackQueryHandler(handle_button))
    application.add_handler(MessageHandler(filters.TEXT, handle_message))

    # Запуск приложения
    await setup_commands(application)
    await application.run_polling()

def main():
    # Инициализация базы данных
    init_db()

    # Токен бота
    token = '7719416897:AAHKQOhCh9r712Bl1TaWknyjk67GvVp2xI4'
    import nest_asyncio
    nest_asyncio.apply()
    # Запуск бота в асинхронном режиме
    loop = asyncio.get_event_loop()
    future = asyncio.ensure_future(run_bot(token))
    loop.run_until_complete(future)

if __name__ == '__main__':
    main()

